HeadHandler
和
TailHandler
Mask计算方式


这里先剧透一下，读事件的传播是从head到tail从上往下传播的，中间会经过我们自定义的Handler，但并不是会一直往下传播直到底部，只有传播到某个Handler中，
Handler又调用了一次例如fireChannelRead方法，才会继续传播下去，而如果Handler调用方法继续往下传播，是被看作自己不处理该消息，给下一个Handler处理，如果自己能处理，则处理掉，操作已经结束，就不要往下传播了，若是编解码器，则还会传播一下给后面的业务逻辑Handler，业务逻辑Handler处理结束，则不往下传播，若没处理结束或是无法处理该消息，则往下传播，若read事件传播到tail（由于是从上往下传播的），说明没有Handler能处理该事件，又或是没有处理完，此时tailContext就会进行一个兜底的操作


ctx.writeAndFlush()和ctx.channel().writeAndFlush()是有区别
https://blog.csdn.net/nightrainljh/article/details/95623449


自定义handler需要继承ChannelHandlerAdapter，ChannelHandlerAdapter的所有方法都有@Skip注解。重写其中的方法就相当于remove了@Skip注解。

netty无锁化设计理念
大多数场景下，并发多线程处理可以提高系统的性能，但是，对共享资源的的使用不当，会带来严重的锁竞争，大量线程的的上下文切换也会消耗系统资源，最终导致性能下降。
保证多个事件的执行顺序。
netty本身是多线程处理，再增加线程，对提升性能帮助不大，Netty采用了串行无锁化设计，在IO线程内部进行串行操作，避免多线程竞争导致的性能下降。
小结：由于网络通信场景的特殊性，Netty采用了局部串行无锁化设计来提高性能。需要结合生产场景来分析。
原文链接：https://blog.csdn.net/chenchangqun11/article/details/102840684





在Netty中，有两种发送消息的方式。你可以直接写到Channel中，也可以写到和ChannelHandler相关联的ChannelHandlerContext对象中。前一种方式将会导致消息从ChannelPipeline的尾端开始流动，而后者将导致消息从ChannelPipeline中的下一个ChannelHandler开始流动。


ThreadGroupthreadGroup





